How to make plots in R using ggpubr
========================================================
author: Michail Belias  
date: 06-12-2018
autosize: true
class: small-code


```{r, echo=FALSE, warning=FALSE, message=FALSE}

if(!require(haven)) install.packages("haven")
if(!require(knitr)) install.packages("knitr")
if(!require(dplyr)) install.packages("dplyr")
if(!require(qwraps2)) install.packages("qwraps2")
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(MASS)) install.packages("MASS")
if(!require(gapminder)) install.packages("gapminder")
if(!require(ggExtra)) install.packages("ggExtra")
if(!require(ggpubr))library(ggpubr)
if(!require(readxl))library(readxl)
if(!require(ggplot2))library(ggplot2)
if(!require(ggsci))library(ggsci)


opts_chunk$set(fig.width=9, fig.height=6, fig.path='Figs/', warning=FALSE, message=FALSE, fig.pos = "H", comment = "")

```

Introduction
========================================================

The ggpubr is a R package that helps you create basic beautiful ggplot2-based graphs.

What is ggpubr:
- Wrapper around the ggplot2 package for beginners in R programming.
- Helps researchers, with basic R programming skills, to create easily publication-ready plots.
- Gives the possibility to add p-values and significance levels to plots.
- Makes it easy to arrange and annotate multiple plots on the same page.
- Makes it easy to change grahical parameters such as colors and labels.
- Is still a ggplot2 object... 
  - Therefore, it can be further manipulated as a ggplot object

Generate some data for descriptive statistics
========================================================

```{r}
Sigma= matrix(c(20,15,15,20), 2)
Sigma2= matrix(c(15,10,10,15), 2)


df =  data.frame(mvrnorm(1000,c(180,80) , Sigma = Sigma) , Gender = rep("Male"))
df2 =  data.frame(mvrnorm(400,c(170,65) , Sigma = Sigma2) , Gender = rep("Female"))

df = rbind(df, df2)
names(df) = c("Height","Weight","Gender")
```

1. Distribution plots
========================================================

Under this section we consider 

- Box Plots
- Violin + Boxplot
- Dot + Box Plot
- Histograms
- Density Plots



Βοx-plot code 
========================================================

```{r}
gg<- ggboxplot(df ,
            x = "Gender", 
            y = "Weight", # variable to be plotted
            color = "black", # paint the borders by Gender
            fill = "Gender", # fill the boxes with color
            title = "Box-plot of weight colored by gender", # a better title
            palette = "jco", # use the jco palette
            add = "mean", # or median
            bxp.errorbar = T  # adds the error bars of boxplots 
            ) +   
  theme(plot.title = element_text(hjust = 0.5))

```

Βοx-plot 
========================================================
```{r echo=FALSE}
plot(gg)
```

violin-plot with boxplot code 
========================================================

```{r}

gg <-ggviolin(df ,
            x = "Gender", 
            y = "Weight", # variable to be plotted
          combine = TRUE, title="Violin-plot with boxplot",
          color = "Gender", palette = "jco",
          ylab = "Expression", 
          add = "boxplot")+   
  theme(plot.title = element_text(hjust = 0.5))

```

Βοxplot with violin 
========================================================
```{r echo=FALSE}
plot(gg)
```

Dotplot code 
========================================================

```{r}
gg<- ggdotplot(df ,
            x = "Gender", 
            y = "Weight", # variable to be plotted
            combine = TRUE, 
            color = "Gender", 
            palette = "jco",
            fill = "white",
            binwidth = 0.1,
            ylab = "Expression", 
            add = "median_iqr",
            add.params = list(size = 0.9)
          )
```

Dotplot
========================================================
```{r echo=FALSE}
plot(gg)
```

Histogram code 
========================================================

```{r}
gg<- gghistogram(df, 
            x= "Weight" ,   # variable to be plotted
            y= "..count..", # or "..density.."
            color = "Gender", # paint the borders by Gender
            fill = "Gender", # fill the bars with color
            bins = 25 , # control how many bars will the histogram have
            title = "Histogram of weight colored by gender", # a better title
            palette = "jco", # use the jco palette
            add = "mean", 
            add_density = T,
            ) +   theme(plot.title = element_text(hjust = 0.5))

```

Histogram plot 
========================================================
```{r echo=FALSE}
plot(gg)
```



Density plot code
========================================================

```{r}
gg <-  ggdensity(df, 
          x = "Weight",
          fill = "Gender",
          palette = "jco", 
          adjust = 3,
          title = "Density plot of weight", 
          linetype = "dotdash",color = "Gender",
          facet.by = "Gender",add = "mean" ) +   
  theme(plot.title = element_text(hjust = 0.5))
```

Density plot 
========================================================

```{r}
plot(gg)
```


2.Correlation plots 
========================================================

Under this section we consider 

- Scatterplots
- Jitter Plots
- Counts Chart
- Bubble Plot
- Marginal Histograms / Boxplot


Scatterplots-Bubble plot code
========================================================
```{r echo=TRUE}

gapminder = gapminder
# Scatterplot
names(gapminder) =  c("Country","Continent","Year","Life_Expectancy",
                      "Population","GDP_per_capita_percentage")

gg = gapminder%>%
    filter(Year %in% "2007")%>%
ggplot( aes(GDP_per_capita_percentage, Life_Expectancy,size = Population, 
            color = Continent)) + # This is then main plot 
  ggtitle("Life expectancy association with GDP per capita percentage (in 2007)")+
  # a new title
  theme(plot.title = element_text(hjust = 0.5))+
    geom_point() + # insert the points of the parameters used in the general ggplot
  theme(plot.title = element_text(hjust = 0.5)) + 
  xlab("GDP per capita") + # Change the label of X-axis
  ylab("Life Expectancy")+ # Change the label of Y-axis
  scale_x_log10() # log-Scale X values 

```

Scatterplots-Bubble plot 
========================================================

```{r, echo=FALSE}
plot(gg)
```


 
 
Scatterplot code
========================================================

```{r}
# Scatterplot


g = ggscatter(df , x = "Weight",y = "Height", 
              color = "Gender", palette = "jco",
              title = "Association of weight and height in males and females",
              xlab = "Weight measured in kilograms",
              ylab = "Height measured in centimeters", 
              shape = 1,
              ggtheme = theme_bw(),
              ellipse = T, 
              ellipse.alpha = 0.4,
              fill = "white"
              )


```

Scatterplot with ellipsis plot
======================================================== 

```{r echo=FALSE}
plot(g)
# ggMarginal(g, type = "density", fill="transparent")
```


Scatterplot with marginal histogram plot
======================================================== 

```{r}
ggMarginal(g, type = "histogram", fill="transparent")
```

Error plots
======================================================== 

```{r echo= FALSE}
# ToothGrowth
data("ToothGrowth")
head(ToothGrowth)
```

```{r}
# Change error plot type and add mean points
ggerrorplot(ToothGrowth, x = "dose", y = "len", 
            desc_stat = "mean_sd",
            error.plot = "errorbar",            # Change error plot type
            add = "mean"                        # Add mean points
            )
```

Ranking plots
========================================================

- (Ordered) Bar Chart
- Lollipop Chart
- Dot Plot
- Slope Chart
- Dumbbell Plot

```{r echo= FALSE}
data1 <- read_excel("Data/Data for graphs.xlsx", 
                    sheet = "graph1")
```

Bar Chart code
========================================================

```{r}
gg= ggbarplot(data = data1, #import  Data
          x="App",          # The X-value
          y="Proportion",   # The percentages
          fill="firebrick1",# The color of the bars
          xlab = "",        # label of X-axis
          title = "Bar chart of dating app percentage", # better title
          ylim = c(0,0.80), # Increase the ylimits
          ylab = "Share of respondents",
          order = c("Happn","Lexa","Paiq","Tinder","Badoo"))+   
  theme(plot.title = element_text(hjust = 0.5))+ 
  scale_y_continuous(breaks=seq(0,0.7,0.1),
                     labels=scales::percent)+
  geom_text(aes(label=paste(Proportion*100,"%",sep = "")),size=3,vjust=-1)


```

Bar Chart
========================================================

```{r echo=FALSE}
plot(gg)
```


Ordered bar-chart code
========================================================

```{r echo=FALSE}
data2 <- read_excel("Data/Data for graphs.xlsx", 
                    sheet = "Sheet2")

```

```{r}
gg= data2%>%
  arrange(desc(-freq))%>%
  ggbarplot( #import  Data
          x="website",          # The X-value
          y="freq",   # The percentages
          fill="nature",# The color of the bars
          xlab = "",        # label of X-axis
          title = "Online dating services in Netherlands (June 2014)", # better title
          ylim = c(0,300000), # Increase the ylimits
          ylab = "Share of respondents")+ rotate() +
  scale_y_continuous(breaks=seq(0,300000,50000),expand=c(0,0))+
    theme(legend.position =c(0.85,0.25),
          legend.title=element_text(size=8),
          legend.text=element_text(size=8),
          plot.title = element_text(hjust = 0.5))


```

Ordered bar-chart 
========================================================
```{r}
plot(gg)
```

Lollipop Chart code
========================================================

```{r}


# Plot
gg= ggplot(data2,aes(x=reorder(website,freq), 
                     y=freq, color=nature, 
                     fill = nature)) + 
  geom_point(size=5,shape = 1) + 
  geom_segment(aes(x=website, xend=website, y=0, yend=freq)) + 
  labs(title="Lollipop Chart", 
       subtitle="Online dating services in Netherlands (June 2014)", 
       caption="source: Alexa.com") + scale_color_lancet()+
  theme(axis.text.x = element_text(angle=65, vjust=0.6))+
  geom_text(aes(label= freq),size=2,hjust=-0.35) + rotate()


```



```{r}
plot(gg)
```

